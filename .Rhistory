import sys, pandas, matplotlib, pybaseball
print("Python:", sys.executable)
print("pandas:", pandas.__version__)
print("matplotlib:", matplotlib.__version__)
print("pybaseball:", pybaseball.__version__)
(base) MBpro-black-2:BareBonesPhysics chipbrock$ library(reticulate)
bash: syntax error near unexpected token `reticulate'
(base) MBpro-black-2:BareBonesPhysics chipbrock$ py_config()
>
(base) MBpro-black-2:BareBonesPhysics chipbrock$
(base) MBpro-black-2:BareBonesPhysics chipbrock$
(base) MBpro-black-2:BareBonesPhysics chipbrock$
library(reticulate); py_config()
import sys, pandas as pd, pybaseball as pb
from pybaseball import cache
print("PY:", sys.executable)
print("pandas:", pd.__version__)
print("pybaseball:", pb.__version__)
print("cache dir:", cache.get_cache_dir() if hasattr(cache, "get_cache_dir") else "n/a")
from pybaseball import cache
cache.disable()      # turn off caching for this session
cache.invalidate()   # clear any previously cached bad CSVs
print("cache disabled & invalidated")
import sys, pandas as pd, pybaseball as pb
from pybaseball import cache
print("PY:", sys.executable)
print("pandas:", pd.__version__)
print("pybaseball:", pb.__version__)
print("cache dir:", cache.get_cache_dir() if hasattr(cache, "get_cache_dir") else "n/a")
import sys, pandas, matplotlib, pybaseball
print("Python:", sys.executable)
print("pandas:", pandas.__version__)
print("matplotlib:", matplotlib.__version__)
print("pybaseball:", pybaseball.__version__)
import sys, pandas as pd, pybaseball as pb
from pybaseball import cache
print("PY:", sys.executable)
print("pandas:", pd.__version__)
print("pybaseball:", pb.__version__)
print("cache dir:", cache.get_cache_dir() if hasattr(cache, "get_cache_dir") else "n/a")
from pybaseball import statcast
df_test = statcast("2024-05-01", "2024-05-01")
print(len(df_test), "rows")
from pybaseball import statcast
df_test = statcast("2024-05-10", "2024-05-10", verbose=False)
print(len(df_test), "rows")
from pybaseball import statcast
import pandas as pd
bad = []
for d in pd.date_range("2024-05-01","2024-05-31"):
s = d.strftime("%Y-%m-%d")
try:
_ = statcast(s, s, verbose=False)
except Exception as e:
bad.append((s, str(e).splitlines()[-1]))
print("Bad days:", bad if bad else "None")
import warnings
warnings.filterwarnings("ignore")
import pandas as pd
from pybaseball import statcast
import matplotlib.pyplot as plt
# 1) Pull May 2024 day-by-day and keep only Brad Keller (641745)
frames = []
for d in pd.date_range("2024-05-01","2024-05-31", freq="D"):
s = d.strftime("%Y-%m-%d")
df_day = statcast(s, s, verbose=False)           # single-day fetch (robust)
k = df_day[df_day["pitcher"] == 641745]
if not k.empty:
frames.append(k)
df_keller = pd.concat(frames, ignore_index=True) if frames else pd.DataFrame()
print("Keller rows in May:", len(df_keller))
# 2) Quick peek
display_cols = ['game_date','player_name','pitch_type','release_speed','p_throws','stand']
print(df_keller[display_cols].head())
# 3) Plot with a fixed canvas (no shifting)
plt.figure()
plt.scatter(df_keller['release_pos_x'], df_keller['plate_z'], alpha=0.5)
plt.xlabel("Horizontal release (ft)")
plt.ylabel("Crossing height at plate (ft)")
plt.title("Brad Keller: release vs plate height (May 2024)")
plt.grid(True)
plt.xlim(-2, 2)   # fixed x range
plt.ylim(0, 7)    # fixed y range
plt.show()
reticulate::repl_python()
