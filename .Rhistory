0.07	0.169	50.334	5.585
0.071	0.171	50.197	5.578
0.072	0.173	50.061	5.571
0.073	0.176	49.924	5.563
0.074	0.178	49.787	5.556
0.075	0.181	49.650	5.549
0.076	0.183	49.513	5.542
0.077	0.185	49.377	5.535
0.078	0.188	49.240	5.528
0.079	0.190	49.103	5.520
0.08	0.193	48.967	5.513
0.081	0.195	48.830	5.506
0.082	0.197	48.694	5.498
0.083	0.200	48.557	5.491
0.084	0.202	48.421	5.484
0.085	0.204	48.284	5.476
0.086	0.207	48.148	5.469
0.087	0.209	48.012	5.461
0.088	0.212	47.875	5.454
0.089	0.214	47.739	5.446
0.09	0.216	47.603	5.439
0.091	0.219	47.466	5.431
0.092	0.221	47.330	5.423
0.093	0.224	47.194	5.416
0.094	0.226	47.058	5.408
0.095	0.228	46.922	5.400
0.096	0.231	46.786	5.392
0.097	0.233	46.650	5.385
0.098	0.235	46.514	5.377
0.099	0.238	46.378	5.369
0.1	0.240	46.242	5.361
0.101	0.243	46.106	5.353
0.102	0.245	45.970	5.345
0.103	0.247	45.834	5.337
0.104	0.250	45.698	5.329
0.105	0.252	45.562	5.321
0.106	0.254	45.427	5.313
0.107	0.257	45.291	5.305
0.108	0.259	45.155	5.297
0.109	0.261	45.020	5.289
0.11	0.264	44.884	5.280
0.111	0.266	44.748	5.272
0.112	0.269	44.613	5.264
0.113	0.271	44.477	5.256
0.114	0.273	44.342	5.247
0.115	0.276	44.206	5.239
0.116	0.278	44.071	5.231
0.117	0.280	43.935	5.222
0.118	0.283	43.800	5.214
0.119	0.285	43.665	5.205
0.12	0.287	43.529	5.197
0.121	0.290	43.394	5.188
0.122	0.292	43.259	5.180
0.123	0.295	43.124	5.171
0.124	0.297	42.989	5.163
0.125	0.299	42.853	5.154
0.126	0.302	42.718	5.145
0.127	0.304	42.583	5.137
0.128	0.306	42.448	5.128
0.129	0.309	42.313	5.119
0.13	0.311	42.178	5.110
0.131	0.313	42.043	5.102
0.132	0.316	41.908	5.093
0.133	0.318	41.773	5.084
0.134	0.320	41.639	5.075
0.135	0.323	41.504	5.066
0.136	0.325	41.369	5.057
0.137	0.328	41.234	5.048
0.138	0.330	41.099	5.039
0.139	0.332	40.965	5.030
0.14	0.335	40.830	5.021
0.141	0.337	40.695	5.012
0.142	0.339	40.561	5.003
0.143	0.342	40.426	4.993
0.144	0.344	40.292	4.984
0.145	0.346	40.157	4.975
0.146	0.349	40.023	4.966
0.147	0.351	39.888	4.956
0.148	0.353	39.754	4.947
0.149	0.356	39.620	4.938
0.15	0.358	39.485	4.928
0.151	0.360	39.351	4.919
0.152	0.363	39.217	4.910
0.153	0.365	39.082	4.900
0.154	0.367	38.948	4.891
0.155	0.370	38.814	4.881
0.156	0.372	38.680	4.871
0.157	0.374	38.546	4.862
0.158	0.377	38.412	4.852
0.159	0.379	38.278	4.843
0.16	0.382	38.144	4.833
0.161	0.384	38.010	4.823
0.162	0.386	37.876	4.813
0.163	0.389	37.742	4.804
0.164	0.391	37.608	4.794
0.165	0.393	37.474	4.784
0.166	0.396	37.340	4.774
0.167	0.398	37.206	4.764
0.168	0.400	37.072	4.754
0.169	0.403	36.939	4.744
0.17	0.405	36.805	4.734
0.171	0.407	36.671	4.724
0.172	0.410	36.538	4.714
0.173	0.412	36.404	4.704
0.174	0.414	36.270	4.694
0.175	0.417	36.137	4.684
0.176	0.419	36.003	4.674
0.177	0.421	35.870	4.664
0.178	0.424	35.736	4.654
0.179	0.426	35.603	4.643
0.18	0.428	35.470	4.633
0.181	0.431	35.336	4.623
0.182	0.433	35.203	4.612
0.183	0.435	35.070	4.602
0.184	0.437	34.936	4.592
0.185	0.440	34.803	4.581
0.186	0.442	34.670	4.571
0.187	0.444	34.537	4.560
0.188	0.447	34.404	4.550
0.189	0.449	34.270	4.539
0.19	0.451	34.137	4.529
0.191	0.454	34.004	4.518
0.192	0.456	33.871	4.507
0.193	0.458	33.738	4.497
0.194	0.461	33.605	4.486
0.195	0.463	33.472	4.475
0.196	0.465	33.339	4.465
0.197	0.468	33.207	4.454
0.198	0.470	33.074	4.443
0.199	0.472	32.941	4.432
0.2	0.475	32.808	4.421
0.201	0.477	32.675	4.411
0.202	0.479	32.543	4.400
0.203	0.482	32.410	4.389
0.204	0.484	32.277	4.378
0.205	0.486	32.145	4.367
0.206	0.489	32.012	4.356
0.207	0.491	31.880	4.345
0.208	0.493	31.747	4.333
0.209	0.495	31.615	4.322
0.21	0.498	31.482	4.311
0.211	0.500	31.350	4.300
0.212	0.502	31.217	4.289
0.213	0.505	31.085	4.278
0.214	0.507	30.953	4.266
0.215	0.509	30.820	4.255
0.216	0.512	30.688	4.244
0.217	0.514	30.556	4.232
0.218	0.516	30.423	4.221
0.219	0.519	30.291	4.209
0.22	0.521	30.159	4.198
0.221	0.523	30.027	4.186
0.222	0.525	29.895	4.175
0.223	0.528	29.763	4.163
0.224	0.530	29.631	4.152
0.225	0.532	29.499	4.140
0.226	0.535	29.367	4.129
0.227	0.537	29.235	4.117
0.228	0.539	29.103	4.105
0.229	0.542	28.971	4.094
0.23	0.544	28.839	4.082
0.231	0.546	28.707	4.070
0.232	0.549	28.576	4.058
0.233	0.551	28.444	4.046
0.234	0.553	28.312	4.035
0.235	0.555	28.180	4.023
0.236	0.558	28.049	4.011
0.237	0.560	27.917	3.999
0.238	0.562	27.785	3.987
0.239	0.565	27.654	3.975
0.24	0.567	27.522	3.963
0.241	0.569	27.391	3.951
0.242	0.571	27.259	3.939
0.243	0.574	27.128	3.927
0.244	0.576	26.996	3.914
0.245	0.578	26.865	3.902
0.246	0.581	26.734	3.890
0.247	0.583	26.602	3.878
0.248	0.585	26.471	3.866
0.249	0.588	26.340	3.853
0.25	0.590	26.209	3.841
0.251	0.592	26.077	3.829
0.252	0.594	25.946	3.816
0.253	0.597	25.815	3.804
0.254	0.599	25.684	3.791
0.255	0.601	25.553	3.779
0.256	0.604	25.422	3.766
0.257	0.606	25.291	3.754
0.258	0.608	25.160	3.741
0.259	0.610	25.029	3.729
0.26	0.613	24.898	3.716
0.261	0.615	24.767	3.703
0.262	0.617	24.636	3.691
0.263	0.620	24.505	3.678
0.264	0.622	24.374	3.665
0.265	0.624	24.244	3.653
0.266	0.626	24.113	3.640
0.267	0.629	23.982	3.627
0.268	0.631	23.851	3.614
0.269	0.633	23.721	3.601
0.27	0.636	23.590	3.588
0.271	0.638	23.459	3.575
0.272	0.640	23.329	3.562
0.273	0.642	23.198	3.549
0.274	0.645	23.068	3.536
0.275	0.647	22.937	3.523
0.276	0.649	22.807	3.510
0.277	0.651	22.676	3.497
0.278	0.654	22.546	3.484
0.279	0.656	22.416	3.471
0.28	0.658	22.285	3.458
0.281	0.661	22.155	3.444
0.282	0.663	22.025	3.431
0.283	0.665	21.895	3.418
0.284	0.667	21.764	3.405
0.285	0.670	21.634	3.391
0.286	0.672	21.504	3.378
0.287	0.674	21.374	3.364
0.288	0.676	21.244	3.351
0.289	0.679	21.114	3.338
0.29	0.681	20.984	3.324
0.291	0.683	20.854	3.311
0.292	0.686	20.724	3.297
0.293	0.688	20.594	3.283
0.294	0.690	20.464	3.270
0.295	0.692	20.334	3.256
0.296	0.695	20.204	3.243
0.297	0.697	20.074	3.229
0.298	0.699	19.944	3.215
0.299	0.701	19.815	3.201
0.3	0.704	19.685	3.188
0.301	0.706	19.555	3.174
0.302	0.708	19.425	3.160
0.303	0.710	19.296	3.146
0.304	0.713	19.166	3.132
0.305	0.715	19.037	3.118
0.306	0.717	18.907	3.104
0.307	0.720	18.778	3.090
0.308	0.722	18.648	3.076
0.309	0.724	18.519	3.062
0.31	0.726	18.389	3.048
0.311	0.729	18.260	3.034
0.312	0.731	18.130	3.020
0.313	0.733	18.001	3.006
0.314	0.735	17.872	2.992
0.315	0.738	17.742	2.978
0.316	0.740	17.613	2.963
0.317	0.742	17.484	2.949
0.318	0.744	17.355	2.935
0.319	0.747	17.225	2.920
0.32	0.749	17.096	2.906
0.321	0.751	16.967	2.892
0.322	0.753	16.838	2.877
0.323	0.756	16.709	2.863
0.324	0.758	16.580	2.848
0.325	0.760	16.451	2.834
0.326	0.762	16.322	2.819
0.327	0.765	16.193	2.805
0.328	0.767	16.064	2.790
0.329	0.769	15.935	2.776
0.33	0.771	15.806	2.761
0.331	0.774	15.678	2.746
0.332	0.776	15.549	2.732
0.333	0.778	15.420	2.717
0.334	0.780	15.291	2.702
0.335	0.783	15.163	2.687
0.336	0.785	15.034	2.673
0.337	0.787	14.905	2.658
0.338	0.789	14.777	2.643
0.339	0.792	14.648	2.628
0.34	0.794	14.519	2.613
0.341	0.796	14.391	2.598
0.342	0.798	14.262	2.583
0.343	0.801	14.134	2.568
0.344	0.803	14.005	2.553
0.345	0.805	13.877	2.538
0.346	0.807	13.749	2.523
0.347	0.810	13.620	2.508
0.348	0.812	13.492	2.493
0.349	0.814	13.364	2.478
0.35	0.816	13.235	2.462
0.351	0.819	13.107	2.447
0.352	0.821	12.979	2.432
0.353	0.823	12.851	2.417
0.354	0.825	12.723	2.401
0.355	0.827	12.594	2.386
0.356	0.830	12.466	2.370
0.357	0.832	12.338	2.355
0.358	0.834	12.210	2.340
0.359	0.836	12.082	2.324
0.36	0.839	11.954	2.309
0.361	0.841	11.826	2.293
0.362	0.843	11.698	2.278
0.363	0.845	11.570	2.262
0.364	0.848	11.443	2.246
0.365	0.850	11.315	2.231
0.366	0.852	11.187	2.215
0.367	0.854	11.059	2.199
0.368	0.856	10.931	2.184
0.369	0.859	10.804	2.168
0.37	0.861	10.676	2.152
0.371	0.863	10.548	2.136
0.372	0.865	10.421	2.121
0.373	0.868	10.293	2.105
0.374	0.870	10.165	2.089
0.375	0.872	10.038	2.073
0.376	0.874	9.910	2.057
0.377	0.877	9.783	2.041
0.378	0.879	9.655	2.025
0.379	0.881	9.528	2.009
0.38	0.883	9.401	1.993
0.381	0.885	9.273	1.977
0.382	0.888	9.146	1.961
0.383	0.890	9.019	1.945
0.384	0.892	8.891	1.928
0.385	0.894	8.764	1.912
0.386	0.897	8.637	1.896
0.387	0.899	8.510	1.880
0.388	0.901	8.382	1.863
0.389	0.903	8.255	1.847
0.39	0.905	8.128	1.831
0.391	0.908	8.001	1.814
0.392	0.910	7.874	1.798
0.393	0.912	7.747	1.782
0.394	0.914	7.620	1.765
0.395	0.917	7.493	1.749
0.396	0.919	7.366	1.732
0.397	0.921	7.239	1.716
0.398	0.923	7.112	1.699
0.399	0.925	6.985	1.682
0.4	0.928	6.858	1.666
0.401	0.930	6.732	1.649
0.402	0.932	6.605	1.632
0.403	0.934	6.478	1.616
0.404	0.936	6.351	1.599
0.405	0.939	6.225	1.582
0.406	0.941	6.098	1.565
0.407	0.943	5.971	1.549
0.408	0.945	5.845	1.532
0.409	0.947	5.718	1.515
0.41	0.950	5.592	1.498
0.411	0.952	5.465	1.481
0.412	0.954	5.339	1.464
0.413	0.956	5.212	1.447
0.414	0.959	5.086	1.430
0.415	0.961	4.959	1.413
0.416	0.963	4.833	1.396
0.417	0.965	4.707	1.379
0.418	0.967	4.580	1.362
0.419	0.970	4.454	1.345
0.42	0.972	4.328	1.327
0.421	0.974	4.201	1.310
0.422	0.976	4.075	1.293
0.423	0.978	3.949	1.276
0.424	0.981	3.823	1.258
0.425	0.983	3.697	1.241
0.426	0.985	3.571	1.224
0.427	0.987	3.445	1.206
0.428	0.989	3.319	1.189
0.429	0.992	3.193	1.171
0.43	0.994	3.067	1.154
0.431	0.996	2.941	1.136
0.432	0.998	2.815	1.119
0.433	1.000	2.689	1.101
0.434	1.003	2.563	1.084
0.435	1.005	2.437	1.066
0.436	1.007	2.311	1.048
0.437	1.009	2.185	1.031
0.438	1.011	2.060	1.013
0.439	1.014	1.934	0.995
0.44	1.016	1.808	0.978
0.441	1.018	1.683	0.960
0.442	1.020	1.557	0.942
0.443	1.022	1.431	0.924
0.444	1.025	1.306	0.906
0.445	1.027	1.180	0.888
0.446	1.029	1.055	0.871
0.447	1.031	0.929	0.853
0.448	1.033	0.804	0.835
0.449	1.035	0.678	0.817
0.45	1.038	0.553	0.799
0.451	1.040	0.427	0.781
0.452	1.042	0.302	0.762
0.453	1.044	0.177	0.744
0.454	1.046	0.051	0.726
""").strip()
# # === OPTION B: read from CSV instead (uncomment) ===
# df = pd.read_csv("nathan_pitch.csv")   # columns: t,x,y,z
# If you used OPTION A:
if raw and "..." not in raw:
df = pd.read_csv(io.StringIO(raw), sep=r"\s+")
elif raw and "..." in raw:
raise ValueError("Please paste the FULL table (no '...').")
else:
raise ValueError("Provide data via raw table (Option A) or CSV (Option B).")
# --- Analytic drag-only (small-angle) in SI, then convert to feet and map to MLB y ---
g   = 9.81
rho = 1.225
Cd  = 0.35
r   = 0.0366
A   = np.pi * r**2
m   = 0.145
v0  = 42.47  # 95 mph (m/s)
k = rho * Cd * A / (2*m)
a = k * v0
# Flight distance (ft) inferred from your data, e.g. ~60 -> 0
L_ft = float(df["y"].iloc[0] - df["y"].iloc[-1])
L_m  = L_ft * 0.3048
# Analytic time to cover L_m
t_plate = (np.exp(k*L_m) - 1.0)/a
t = np.linspace(0, t_plate, len(df))
# Our horizontal distance from release in meters
x_m = (1.0/k) * np.log(1.0 + a*t)
# Map to MLB y (ft): y_MLB = initial_y_ft - x_ft
x_ft = x_m * 3.28084
y0_ft = float(df["y"].iloc[0])
y_analytic_ft = y0_ft - x_ft
# Analytic vertical height in meters -> feet
y0_m = float(df["z"].iloc[0]) * 0.3048  # use your actual release height (6 ft)
z_m = (y0_m
- (g/4.0)*t**2
- (g/(2.0*a))*t
+ (g/(2.0*a*a)) * np.log(1.0 + a*t))
z_analytic_ft = z_m * 3.28084
# --- Plot: z vs y (drop along flight path) ---
plt.figure(figsize=(7,4.5))
plt.plot(df["y"], df["z"], label="Nathan spreadsheet", lw=2)
plt.plot(y_analytic_ft, z_analytic_ft, "--", label="Analytic drag-only (no Magnus)", lw=2)
plt.gca().invert_xaxis()  # y decreases toward home plate
plt.xlabel("y (ft) — distance toward home plate")
plt.ylabel("z (ft) — vertical height")
plt.title("z vs y: Nathan data vs analytic drag-only")
plt.grid(True)
plt.legend()
plt.show()
# --- Plot: z vs t (drop along flight path) ---
plt.figure(figsize=(7,4.5))
plt.plot(df["t"], df["z"], label="Nathan spreadsheet", lw=2)
plt.plot(y_analytic_ft, z_analytic_ft, "--", label="Analytic drag-only (no Magnus)", lw=2)
plt.gca().invert_xaxis()  # y decreases toward home plate
plt.xlabel("y (ft) — distance toward home plate")
plt.ylabel("z (ft) — vertical height")
plt.title("z vs y: Nathan data vs analytic drag-only")
plt.grid(True)
plt.legend()
plt.show()
import numpy as np
import matplotlib.pyplot as plt
# ---- Parameters ----
g   = 9.81                    # gravity (m/s^2)
rho = 1.225                   # air density (kg/m^3)
r   = 0.0366                  # baseball radius (m)
A   = np.pi * r**2            # cross-section (m^2)
m   = 0.145                   # mass (kg)
Cd  = 0.35                    # drag coefficient (typical MLB pitch regime)
CL  = 0.22                    # lift coefficient (tweak: ~0.18–0.30 covers many 4-seams)
v0  = 42.47                   # 95 mph (m/s)
vy0 = 0.0                     # vertical release speed (0 = "flat")
y0  = 1.83                    # release height ~6 ft (m)
L   = 18.44                   # distance mound->plate (m)
# ---- Derived constants ----
k   = rho * Cd * A / (2*m)    # drag constant (1/m)
kL  = rho * CL * A / (2*m)    # lift constant (1/m)
a   = k * v0                  # convenience (1/s)
# Horizontal solution (small-angle): v_x(t) = v0 / (1 + a t)
# Time to home plate is set solely by drag in x (lift is vertical here):
t_plate = (np.exp(k*L/v0) - 1) / (k*v0)
# ---- Analytic y(t) without Magnus (reference) ----
# From the earlier derivation:
def y_no_magnus(t):
return (
y0
- (g/4.0)*t**2
- (g/(2.0*a))*t
+ (g/(2.0*a**2))*np.log(1.0 + a*t)
)
# ---- Analytic y(t) with Magnus (small-angle) ----
# Let μ(t) = 1 + a t. Then:
# v_y(t) = [vy0 + g/(2a)]/μ  - (g/(2a)) μ + (kL v0^2 /(a μ)) ln μ
# y(t)   = y0 - (g/(4 a^2))(μ^2 - 1) + ([vy0 + g/(2a)]/a) ln μ + (kL v0^2 /(2 a^2)) [ln μ]^2
def y_with_magnus(t):
mu = 1.0 + a*t
lnmu = np.log(mu)
return (
y0
- (g/(4.0*a*a))*(mu**2 - 1.0)
+ ((vy0 + g/(2.0*a))/a)*lnmu
+ (kL * v0*v0 /(2.0*a*a))*(lnmu**2)
)
# ---- Build time grid and evaluate ----
t = np.linspace(0.0, max(0.6, t_plate*1.05), 400)
y0_curve  = y_no_magnus(t)
yL_curve  = y_with_magnus(t)
# Values at the plate
y_noMag_plate = y_no_magnus(t_plate)
y_Mag_plate   = y_with_magnus(t_plate)
drop_noMag    = y0 - y_noMag_plate
drop_Mag      = y0 - y_Mag_plate
# ---- Plot ----
plt.figure(figsize=(7,4.5))
plt.plot(t, y0_curve,  label=f"No Magnus (drop ≈ {drop_noMag:.2f} m)")
plt.plot(t, yL_curve,  label=f"With Magnus, C_L={CL:.2f} (drop ≈ {drop_Mag:.2f} m)")
# marker at home plate time
plt.axvline(t_plate, linestyle="--", alpha=0.7)
plt.scatter([t_plate, t_plate], [y_noMag_plate, y_Mag_plate], zorder=3)
plt.title("Vertical position y(t) for a 95 mph pitch: drag+gravity vs +Magnus (small-angle)")
plt.xlabel("Time t (s)")
plt.ylabel("Height y (m)")
plt.ylim(0, y0)            # start y-axis at ground
plt.legend()
plt.grid(True)
plt.show()
